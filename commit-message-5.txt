feat: implement complete role-based access control system with six user roles

✅ TASK 5.1-5.5 COMPLETED: Role-Based Access Control [Priority: Critical]

## Summary
Implemented comprehensive RBAC system with six distinct user roles, additive permissions, 
context switching, and complete audit logging as defined in the product brief.

## Features Added
- Six system roles: Member, Facilitator, PTM, Manager, Director, Admin
- 55+ permissions across all system domains (circles, events, users, system, etc.)
- Additive permission system - users inherit permissions from all assigned roles
- Role context switching functionality
- Complete audit logging for all role changes
- Permission checking middleware and decorators
- Async service layer with proper database integration

## Database Changes
- Created `permissions` table with resource:action naming convention
- Created `roles` table with priority hierarchy
- Created `user_roles` association table with assignment metadata
- Created `role_audit_logs` table for compliance and auditing
- Generated migration: b37f99db0c0e_add_role_based_access_control_tables.py
- Seeded database with all 6 roles and 55 permissions

## Technical Implementation
- **Models**: Permission, Role, UserRole, RoleAuditLog with full relationships
- **Services**: RoleService with async methods for all role operations
- **Utilities**: PermissionChecker class and @require_permission decorator
- **Seeding**: Automated script for role/permission initialization
- **Testing**: Test-driven development with 14 comprehensive tests

## Role Definitions
1. **Member** (Priority 10): Basic participation - 7 permissions
2. **Facilitator** (Priority 20): Circle management - 15 permissions  
3. **PTM** (Priority 30): Event production coordination - 16 permissions
4. **Manager** (Priority 40): Team and resource management - 15 permissions
5. **Director** (Priority 50): Strategic oversight - 16 permissions
6. **Admin** (Priority 60): System administration - 21 permissions

## Security Features
- Hierarchical role priority system
- Permission validation before assignment
- Context switching restricted to assigned roles
- Complete audit trail for compliance
- Foreign key constraints and data integrity

## Test Results
- ✅ 14/14 tests passing
- ✅ 68% code coverage (approaching 80% target)
- ✅ Database seeding verification successful
- ✅ All role definitions validated
- ✅ Permission inheritance working correctly

## Files Added/Modified
### Added:
- backend/app/models/role.py - Complete role system models
- backend/app/services/role_service.py - Async role management service
- backend/app/core/exceptions.py - Role-specific exceptions
- backend/tests/test_user_roles.py - Comprehensive test suite
- backend/scripts/seed_roles.py - Database seeding script
- backend/alembic/versions/b37f99db0c0e_add_role_based_access_control_tables.py
- enhancements_5.md - Complete implementation documentation

### Modified:
- backend/app/models/__init__.py - Added role model imports
- backend/app/models/user.py - Added UserRole relationships
- project-documents/punchlist.md - Updated task completion status

## Verification
```bash
# Database verification
✅ Member: 7/7 permissions
✅ Facilitator: 15/15 permissions  
✅ PTM: 16/16 permissions
✅ Manager: 15/15 permissions
✅ Director: 16/16 permissions
✅ Admin: 21/21 permissions

# Test results
✅ Successfully seeded 6 system roles and 55 permissions!
✅ All 14 tests passing with 68% coverage
```

## Next Steps
Ready for Phase 3: Circle Management (Tasks 7.1-8.5)
- Circle core features with role-based access control
- Circle frontend with permission-based UI components

## Breaking Changes
None - this is a new feature implementation

## Documentation
Complete implementation documented in enhancements_5.md with technical
architecture, security considerations, and future enhancement roadmap.

Resolves: Tasks 5.1, 5.2, 5.3, 5.4, 5.5
Co-authored-by: Claude-Sonnet-4 <assistant@anthropic.com> 